@page "/"
@inject INoJSModalService Modal
@inject INoJSToastService NoJSToast
@inject INoJSCardService Card
@using Microsoft.Extensions.Logging
@inject ILogger<Index> Logger
@using Microsoft.AspNetCore.Html
@using Microsoft.AspNetCore.Http
<h1>Hello, world!</h1>
<button @onclick="@ShowModal" class="btn btn-primary">Show Modal</button>

<button @onclick="@ShowModalAsYesNoPrompt" class="btn btn-primary">Show Modal styled as a prompt</button>

TOAST test:
<button class="btn btn-info" @onclick="@(() => NoJSToast.ShowToast("I'm an INFO message", NoJSToastLevel.Info))">Info Toast</button>
<button class="btn btn-success" @onclick="@(() => NoJSToast.ShowToast("I'm a SUCCESS message", NoJSToastLevel.Success))">Success Toast</button>
<button class="btn btn-warning" @onclick="@(() => NoJSToast.ShowToast("I'm a WARNING message", NoJSToastLevel.Warning))">Warning Toast</button>
<button class="btn btn-danger" @onclick="@(() => NoJSToast.ShowToast("I'm an ERROR message", NoJSToastLevel.Error))">Error Toast</button>

Card Test:
<NoJSCard FooterIsVisible="true" HeaderIsVisible="true" Title="@(titleText)" Footer="@(footerText)">
    <CardExampleForm></CardExampleForm>
</NoJSCard>

Card Test2:
<NoJSCard FooterIsVisible="false" HeaderIsVisible="false" Title="@(titleText)" Footer="@(footerText)">
    <div class="simple-form">

        <div class="form-group">
            <label for="first-name">First Name</label>
            <input type="text" class="form-control" id="first-name" placeholder="Enter First Name" />
        </div>
    </div>
</NoJSCard>

<button @onclick="@TestLogger" class="btn btn-primary">Test Logger</button>

@code {

    MarkupString titleText = new MarkupString("<h4 class=\"text-uppercase text-center\">HTML 5 from Select</h4>");
    MarkupString footerText = new MarkupString(
        "<footer class=\"page - " +
        "footer font - small blue\"><div class=\"footer-copyright text-center py-3\">© 2018 Copyright:" +
    "<a href=\"https://mdbootstrap.com/education/bootstrap/\"> MDBootstrap.com</a></div></footer>");

    void TestLogger()
    {
        try
        {
            Logger.LogError("testing Warning");
            Logger.LogInformation("testing Information");
            Logger.LogWarning("testing warning");
            Logger.LogCritical("testing critical");
            throw new System.ArgumentException("Testing Catch for library", "testing catch exception");

        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "testing catch exception");

        }

    }

    void ShowModal()
    {
        try
        {
            throw new System.ArgumentException("Parameter cannot be null", "original");
            Logger.LogError("testing exeption logging");
            var parameters = new NoJSModalParameters();
            parameters.Add("FormId", 11);

            Modal.OnClose += ModalClosed;
            Modal.Show<ExampleForm>("Sign Up Form", parameters);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "testing exeption logging");
        }

    }

    void ModalClosed(NoJSModalResult modalResult)
    {
        Console.WriteLine("Modal has closed");

        if (modalResult.Cancelled)
        {
            Console.WriteLine("Modal was Cancelled");
        }
        else
        {
            Console.WriteLine(modalResult.Data.ToString());
        }

        Modal.OnClose -= ModalClosed;
    }

    void ShowModalAsYesNoPrompt()
    {
        var parameters = new NoJSModalParameters();
        var options = new NoJSModalOptions() { Style = "nojs-prompt-modal" };

        Modal.OnClose += ModalClosed;
        Modal.Show("Delete record?", typeof(YesNoPrompt), options);
    }

}